// Variable para guardar el √∫ltimo mensaje usado
let lastShIndex = -1;

let handler = async (m, { conn, participants }) => {
    // N√∫meros de owners
    const owners = global.owner.map(o => o[0]);
    if (!owners.includes(m.sender.replace(/[^0-9]/g, ''))) return; // solo owners

    // Comando sin prefijo: "sh"
    if (m.text && m.text.toLowerCase() === 'sh') {
        const mensajes = [
            "ü´° Hola, pueden hacer silencio mi creador esta durmiendo! üò¥",
            "üòÆ‚Äçüí® Hagan silencio, gracias! ü•∞",
            "ü´é Cornudos y cornudas hagan caso cierren el orto! üòé", 
            "üñïüèª No se callan ni por casualidad manga de giles ü´†" 
        ];

        // Elegir un √≠ndice aleatorio que no sea igual al √∫ltimo
        let index;
        do {
            index = Math.floor(Math.random() * mensajes.length);
        } while (index === lastShIndex);
        lastShIndex = index; // guardar el √≠ndice actual

        const mensaje = mensajes[index];

        // Menciones ocultas: array de JID de todos los participantes
        const mentions = participants.map(p => p.jid);

        // Enviar mensaje con menciones ocultas
        await conn.sendMessage(m.chat, { text: mensaje, mentions });
    }
};

// Configuraci√≥n del plugin
handler.customPrefix = /^sh$/i; // detecta solo "sh" sin prefijo
handler.command = new RegExp(); // vac√≠o porque no usa prefijo
handler.owner = true; // solo owners
export default handler;
